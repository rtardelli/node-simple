openapi: 3.0.0
info:
  title: Bike It
  description: API para um serviço hipotético de gerenciamento de um cicle
  version: 0.1
servers:
  - url: http://api.example.com/v1
    description: to do
paths:
  /users:
    get:
      tags:
        - Users
      summary: Returns a list of users
      operationId: getUsers
      responses:
        '200':
          description: A JSON array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401Unauthorized'
    post:
      tags:
        - Users
      summary: Create a new user
      operationId: addUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user
          in: body
          description: The user JSON to be added
          schema:
            $ref: '#/components/schemas/User'
          required: true
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
              description: New resource's URL
        '400':
          description: Content invalid.
        '401':
          $ref: '#/components/responses/401Unauthorized'

components:
  #-------------------
  # Reusable responses
  #-------------------
  responses:
    404NotFound:        # Can be referenced as '#/components/responses/404NotFound'
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    401Unauthorized:    # Can be referenced as '#/components/responses/401Unauthorized'
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error
      
  #-------------------------------
  # Reusable schemas (data models)
  #-------------------------------
  schemas:
    User:               # Can be referenced as '#/components/schemas/User'
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
        - id
        - name
    Error:              # Can be referenced as '#/components/schemas/Error'
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
          
  #-------------------------------
  # Reusable operation parameters
  #-------------------------------
  parameters:
    offsetParam:        # Can be referenced as '#/components/parameters/offsetParam'
      name: offset
      in: query
      description: Number of items to skip before returning the responses.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
        
    limitParam:         # Can be referenced as '#/components/parameters/limitParam'
      name: limit
      in: query
      description: Maximum number of items to return.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
        
